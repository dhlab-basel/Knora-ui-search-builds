{"version":3,"file":"knora-search.js.map","sources":["ng://@knora/search/lib/search.component.ts","ng://@knora/search/lib/extended-search/select-resource-class/select-resource-class.component.ts","ng://@knora/search/lib/extended-search/extended-search.component.ts","ng://@knora/search/lib/extended-search/select-ontology/select-ontology.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/specify-property-value.component.ts","ng://@knora/search/lib/extended-search/select-property/select-property.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/boolean-value/boolean-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/date-value/header-calendar/header-calendar.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/date-value/date-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/decimal-value/decimal-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/integer-value/integer-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/link-value/link-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/text-value/text-value.component.ts","ng://@knora/search/lib/extended-search/select-property/specify-property-value/uri-value/uri-value.component.ts","ng://@knora/search/lib/search.module.ts"],"sourcesContent":["/* Copyright Â© 2016 Lukas Rosenthaler, AndrÃ© Kilchenmann, Andreas Aeschlimann,\n * Sofia Georgakopoulou, Ivan Subotic, Benjamin Geer, Tobias Schweizer.\n * This file is part of SALSAH.\n * SALSAH is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * SALSAH is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * You should have received a copy of the GNU Affero General Public\n * License along with SALSAH.  If not, see <http://www.gnu.org/licenses/>.\n * */\n\nimport { Component, ElementRef, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    animate,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\n\n@Component({\n    selector: 'kui-search',\n    template: `<div class=\"search-bar-elements\">\n\n    <!-- the next element - div.extended-search-panel - is a hidden dropdown filter menu -->\n\n    <div class=\"search-panel\" [class.active]=\"searchPanelFocus\">\n        <div>\n            <button class=\"prefix\" (click)=\"doSearch(search)\">\n                <mat-icon>search</mat-icon>\n            </button>\n        </div>\n\n        <div class=\"input-field\">\n            <input #search autocomplete=\"off\" type=\"search\" [placeholder]=\"searchLabel\" [(ngModel)]=\"searchQuery\" name=\"search\" (keyup.esc)=\"resetSearch(search)\"\n                (keyup)=\"onKey(search, $event)\" (click)=\"setFocus()\" (focus)=\"toggleMenu('simpleSearch')\" [disabled]=\"focusOnExtended === 'active'\"\n            />\n        </div>\n\n        <!-- switch button: on some focus we need a close button for the simple or extended panel -->\n        <div>\n            <button class=\"suffix\" *ngIf=\"focusOnSimple === 'active'\" (click)=\"resetSearch(search)\">\n                <mat-icon>close</mat-icon>\n            </button>\n            <button class=\"suffix\" *ngIf=\"focusOnSimple === 'inactive'\">\n            </button>\n        </div>\n\n        <!-- the search panel has two \"dropdown\" menus: one for simple search and another one for the extended search -->\n        <div class=\"salsah-menu simple-search\" [@simpleSearchMenu]=\"focusOnSimple\" *ngIf=\"showSimpleSearch\">\n            <mat-list class=\"salsah-previous-search-list\">\n                <mat-list-item *ngFor=\"let item of prevSearch | reverse; let i=index\">\n                    <h4 mat-line *ngIf=\"i<10\" (click)=\"doPrevSearch(item)\">{{item}}</h4>\n                    <button mat-icon-button (click)=\"resetPrevSearch(item)\">\n                        <mat-icon aria-label=\"close\">clear</mat-icon>\n                    </button>\n                </mat-list-item>\n            </mat-list>\n            <button mat-stroked-button color=\"accent\" class=\"right\" (click)=\"resetPrevSearch()\" *ngIf=\"prevSearch\">Clear</button>\n        </div>\n\n        <div class=\"salsah-menu extended-search\" [@extendedSearchMenu]=\"focusOnExtended\">\n            <div class=\"salsah-menu-header\">\n                <span class=\"salsah-menu-title\">\n                    <h4>Advanced search</h4>\n                </span>\n                <span class=\"salsah-menu-action\">\n                    <button mat-icon-button (click)=\"toggleMenu('extendedSearch')\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </span>\n            </div>\n            <div class=\"extended-search-box\">\n                <kui-extended-search [route]=\"route\" (toggleExtendedSearchForm)=\"toggleMenu('extendedSearch')\"></kui-extended-search>\n            </div>\n        </div>\n    </div>\n\n    <!-- Extended search button to display the extended search form in the search panel -->\n    <button mat-button type=\"button\" color=\"primary\" class=\"advanced-search-button\" (click)=\"toggleMenu('extendedSearch')\">\n        advanced\n    </button>\n\n</div>\n`,\n    styles: [`input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration,input[type=search]::-webkit-search-results-button,input[type=search]::-webkit-search-results-decoration{display:none}input[type=search]{-moz-appearance:none;-webkit-appearance:none}.center{display:block;margin-left:auto;margin-right:auto}.close{right:12px}.extended-search-box{margin:12px}.advanced-search-button{margin-left:10px}.full-width{width:100%}.hide{display:none}.inactive,.mute{color:#7a7a7a}.search-panel{background-color:#f9f9f9;border-radius:4px;display:inline-flex;height:40px;position:relative;width:720px;z-index:10}.search-panel:hover{box-shadow:0 1px 3px rgba(0,0,0,.5)}.search-panel div.input-field{flex:1}.search-panel div.input-field input{border-style:none;font-size:14pt;height:38px;position:absolute;width:640px}.search-panel div.input-field input:active,.search-panel div.input-field input:focus{outline:0}.search-panel div .prefix,.search-panel div .suffix{background-color:#fff;border-radius:3px;border-style:none;color:rgba(41,41,41,.4);cursor:pointer;height:38px;outline:0;position:relative;width:40px}.search-panel div .prefix:active,.search-panel div .suffix:active{color:#515151}.search-panel.active{box-shadow:0 1px 3px rgba(0,0,0,.5)}.salsah-menu{box-shadow:0 3px 5px -1px rgba(11,11,11,.2),0 6px 10px 0 rgba(11,11,11,.14),0 1px 18px 0 rgba(11,11,11,.12);background-color:#f9f9f9;border-radius:4px;position:absolute}.salsah-menu .salsah-menu-header{background-color:#f9f9f9;border-top-left-radius:4px;border-top-right-radius:4px;display:inline-block;height:48px;width:100%}.salsah-menu .salsah-menu-header .salsah-menu-title{float:left;font-size:14px;font-weight:400;margin-top:4px;padding:12px}.salsah-menu .salsah-menu-header .salsah-menu-action{float:right;margin:4px}.salsah-menu.extended-search,.salsah-menu.simple-search{min-height:720px;width:720px}.salsah-menu.simple-search{padding-top:60px;z-index:-1}.salsah-menu.simple-search .salsah-previous-search-list .mat-list-item{cursor:pointer}.salsah-menu.simple-search .salsah-previous-search-list .mat-list-item:hover{background-color:#f9f9f9}.salsah-menu.simple-search .salsah-previous-search-list .mat-list-item:hover mat-icon{display:block}.salsah-menu.simple-search .salsah-previous-search-list .mat-list-item mat-icon{display:none}.salsah-menu.simple-search .right{margin-top:12px;margin-left:16px}.salsah-menu.extended-search{z-index:20}.search-bar-elements{display:flex}.show{display:block}`],\n    animations: [\n        trigger('simpleSearchMenu',\n            [\n                state('inactive', style({ display: 'none' })),\n                state('active', style({ display: 'block' })),\n                transition('inactive => true', animate('100ms ease-in')),\n                transition('true => inactive', animate('100ms ease-out'))\n            ]\n        ),\n        trigger('extendedSearchMenu',\n            [\n                state('inactive', style({ display: 'none' })),\n                state('active', style({ display: 'block' })),\n                transition('inactive => true', animate('100ms ease-in')),\n                transition('true => inactive', animate('100ms ease-out'))\n            ]\n        ),\n    ]\n})\n\n\nexport class SearchComponent implements OnInit {\n\n    @Input() route: string = '/search';\n\n    searchQuery: string;\n\n    searchPanelFocus: boolean = false;\n\n    prevSearch: string[] = JSON.parse(localStorage.getItem('prevSearch'));\n\n    focusOnSimple: string = 'inactive';\n    focusOnExtended: string = 'inactive';\n\n    searchLabel: string = 'Search';\n\n    showSimpleSearch: boolean = true;\n\n    constructor(private _route: ActivatedRoute,\n        private _router: Router,\n        private _eleRef: ElementRef) {\n\n    }\n\n    ngOnInit() {\n    }\n\n    /**\n     *\n     * @param search_ele\n     * @param event\n     */\n    onKey(search_ele: HTMLElement, event): void {\n        this.focusOnSimple = 'active';\n        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n        if (this.searchQuery && (event.key === 'Enter' || event.keyCode === 13 || event.which === 13)) {\n            this.doSearch(search_ele);\n        }\n        if (event.key === 'Escape' || event.keyCode === 27 || event.which === 27) {\n            this.resetSearch(search_ele);\n        }\n    }\n\n    /**\n     * Realise a simple search\n     * @param search_ele\n     */\n    doSearch(search_ele: HTMLElement): void {\n        if (this.searchQuery !== undefined && this.searchQuery !== null) {\n            this.toggleMenu('simpleSearch');\n            this._router.navigate([this.route + '/fulltext/' + this.searchQuery]);\n\n            // this._router.navigate(['/search/fulltext/' + this.searchQuery], { relativeTo: this._route });\n\n            // push the search query into the local storage prevSearch array (previous search)\n            // to have a list of recent search requests\n            let existingPrevSearch: string[] = JSON.parse(localStorage.getItem('prevSearch'));\n            if (existingPrevSearch === null) { existingPrevSearch = []; }\n            let i: number = 0;\n            for (const entry of existingPrevSearch) {\n                // remove entry, if exists already\n                if (this.searchQuery === entry) { existingPrevSearch.splice(i, 1); }\n                i++;\n            }\n\n            existingPrevSearch.push(this.searchQuery);\n            localStorage.setItem('prevSearch', JSON.stringify(existingPrevSearch));\n            // TODO: save the previous search queries somewhere in the user's profile\n\n        } else {\n            search_ele.focus();\n            this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n        }\n    }\n\n    /**\n     * Reset the search\n     * @param search_ele\n     */\n    resetSearch(search_ele: HTMLElement): void {\n        this.searchQuery = null;\n        search_ele.focus();\n        this.focusOnSimple = 'inactive';\n        this.searchPanelFocus = !this.searchPanelFocus;\n    }\n\n    /**\n     * Realise a previous search\n     * @param query\n     */\n    doPrevSearch(query: string): void {\n        this.searchQuery = query;\n        this._router.navigate([this.route + '/fulltext/' + query], { relativeTo: this._route });\n        this.toggleMenu('simpleSearch');\n    }\n\n    /**\n     * Reset previous searches - the whole previous search or specific item by name\n     * @param name\n     */\n    resetPrevSearch(name: string = null): void {\n        if (name) {\n            // delete only this item with the name ...\n            const i: number = this.prevSearch.indexOf(name);\n            this.prevSearch.splice(i, 1);\n            localStorage.setItem('prevSearch', JSON.stringify(this.prevSearch));\n        } else {\n            // delete the whole \"previous search\" array\n            localStorage.removeItem('prevSearch');\n        }\n        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n\n    }\n\n    /**\n     * Set simple focus to active\n     */\n    setFocus(): void {\n        this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n        this.focusOnSimple = 'active';\n        this.searchPanelFocus = !this.searchPanelFocus;\n    }\n\n    /**\n     * Switch according to the focus between simple or extended search\n     * @param name\n     */\n    toggleMenu(name: string): void {\n        switch (name) {\n            case 'simpleSearch':\n                this.prevSearch = JSON.parse(localStorage.getItem('prevSearch'));\n                this.focusOnSimple = (this.focusOnSimple === 'active' ? 'inactive' : 'active');\n                this.showSimpleSearch = true;\n                break;\n            case 'extendedSearch':\n                this.focusOnExtended = (this.focusOnExtended === 'active' ? 'inactive' : 'active');\n                this.showSimpleSearch = false;\n                break;\n        }\n    }\n}\n","import { Component, EventEmitter, Inject, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ResourceClass } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'kui-select-resource-class',\n    template: `<mat-form-field *ngIf=\"resourceClasses.length > 0\">\n  <mat-select placeholder=\"Resource Class\" [formControl]=\"form.controls['resourceClass']\">\n    <mat-option [value]=\"null\">no selection</mat-option>\n    <!-- undo selection of a resource class -->\n    <mat-option *ngFor=\"let resourceClass of resourceClasses\" [value]=\"resourceClass.id\">{{ resourceClass.label }}</mat-option>\n  </mat-select>\n</mat-form-field>`,\n    styles: [``]\n})\nexport class SelectResourceClassComponent implements OnInit, OnChanges {\n\n    @Input() formGroup: FormGroup;\n\n    // setter method for resource classes when being updated by parent component\n    @Input()\n    set resourceClasses(value: Array<ResourceClass>) {\n        this.resourceClassSelected = undefined; // reset on updates\n        this._resourceClasses = value;\n    }\n\n    // getter method for resource classes (used in template)\n    get resourceClasses() {\n        return this._resourceClasses;\n    }\n\n    // event emitted to parent component once a resource class is selected by the user\n    @Output() resourceClassSelectedEvent = new EventEmitter<string>();\n\n    // available resource classes for selection\n    private _resourceClasses: Array<ResourceClass>;\n\n    // stores the currently selected resource class\n    private resourceClassSelected: string;\n\n    form: FormGroup;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    /**\n     * Returns the Iri of the selected resource class.\n     *\n     * @returns the Iri of the selected resource class or false in case no resource class is selected.\n     */\n    getResourceClassSelected(): any {\n        if (this.resourceClassSelected !== undefined && this.resourceClassSelected !== null) {\n            return this.resourceClassSelected;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Initalizes the FormGroup for the resource class selection.\n     * The initial value is set to null.\n     */\n    private initForm() {\n        // build a form for the resource class selection\n        this.form = this.fb.group({\n            resourceClass: [null] // resource class selection is optional\n        });\n\n        // store and emit Iri of the resource class when selected\n        this.form.valueChanges.subscribe((data) => {\n            this.resourceClassSelected = data.resourceClass;\n            this.resourceClassSelectedEvent.emit(this.resourceClassSelected);\n        });\n    }\n\n    ngOnInit() {\n\n        this.initForm();\n\n        // add form to the parent form group\n        this.formGroup.addControl('resourceClass', this.form);\n\n    }\n\n    ngOnChanges() {\n\n        if (this.form !== undefined) {\n\n            // resource classes have been reinitialized\n            // reset form\n            resolvedPromise.then(() => {\n\n                // remove this form from the parent form group\n                this.formGroup.removeControl('resourceClass');\n\n                this.initForm();\n\n                // add form to the parent form group\n                this.formGroup.addControl('resourceClass', this.form);\n\n            });\n\n        }\n    }\n\n}\n","import { Component, EventEmitter, Inject, Input, OnInit, Output, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n    GravsearchGenerationService,\n    OntologyCacheService,\n    OntologyInformation,\n    OntologyMetadata,\n    Properties,\n    PropertyWithValue,\n    ReadResourcesSequence,\n    ResourceClass\n} from '@knora/core';\nimport { SelectPropertyComponent } from './select-property/select-property.component';\nimport { SelectResourceClassComponent } from './select-resource-class/select-resource-class.component';\n\n\n@Component({\n    selector: 'kui-extended-search',\n    template: `<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n\n  <div>\n    <kui-select-ontology *ngIf=\"ontologies.length > 0\" [formGroup]=\"form\" [ontologies]=\"ontologies\" (ontologySelected)=\"getResourceClassesAndPropertiesForOntology($event)\"></kui-select-ontology>\n  </div>\n\n  <div class=\"select-resource-class\" *ngIf=\"resourceClasses?.length > 0\">\n    <kui-select-resource-class #resourceClass [formGroup]=\"form\" [resourceClasses]=\"resourceClasses\" (resourceClassSelectedEvent)=\"getPropertiesForResourceClass($event)\"></kui-select-resource-class>\n  </div>\n\n  <div class=\"select-property\" *ngIf=\"properties !== undefined\">\n    <div *ngFor=\"let prop of activeProperties; let i = index\">\n\n      <kui-select-property #property [activeResourceClass]=\"activeResourceClass\" [formGroup]=\"form\" [index]=\"i\" [properties]=\"properties\"></kui-select-property>\n\n    </div>\n  </div>\n\n\n  <div>\n    <button mat-mini-fab class=\"property-buttons add-property-button\" color=\"primary\" type=\"button\" (click)=\"addProperty()\" [disabled]=\"activeOntology === undefined || activeProperties.length >= 4\">\n      <mat-icon aria-label=\"add a property\">add</mat-icon>\n    </button>\n\n    <button mat-mini-fab class=\"property-buttons remove-property-button\" color=\"primary\" type=\"button\" (click)=\"removeProperty()\" [disabled]=\"activeProperties.length == 0\">\n      <mat-icon aria-label=\"remove property\">remove</mat-icon>\n    </button>\n  </div>\n\n  <!--  <div>\n    <button mat-icon-button type=\"button\" (click)=\"resetForm()\" [disabled]=\"this.activeOntology === undefined\">\n      <mat-icon aria-label=\"reset query form\">clear</mat-icon>\n    </button>\n\n    <button mat-icon-button type=\"submit\" [disabled]=\"!formValid\">\n      <mat-icon aria-label=\"submit query\">send</mat-icon>\n    </button>\n  </div> -->\n\n  <button class=\"extended-buttons extended-search-button\" mat-stroked-button color=\"primary\" type=\"submit\" [disabled]=\"!formValid\">\n    Search\n  </button>\n  <button class=\"extended-buttons reset\" mat-stroked-button type=\"button\" (click)=\"resetForm()\" [disabled]=\"this.activeOntology === undefined\">\n    Reset\n  </button>\n\n\n</form>\n`,\n    styles: [`.add-property-button{margin-right:5px}.extended-buttons{margin-top:25px}.extended-search-button{margin-right:5px}.property-buttons{margin-top:25px}.select-property{margin-left:22px}.select-resource-class{margin-left:12px}`]\n})\nexport class ExtendedSearchComponent implements OnInit {\n\n    @Input() route;\n\n    // trigger toggle for extended search form\n    @Output() toggleExtendedSearchForm = new EventEmitter<boolean>();\n\n    // all available ontologies\n    ontologies: Array<OntologyMetadata> = [];\n\n    // ontology chosen by the user\n    activeOntology: string;\n\n    // properties specified by the user\n    activeProperties: boolean[] = [];\n\n    // resource classes for the selected ontology\n    resourceClasses: Array<ResourceClass> = [];\n\n    // definition of the selected resource class, if set.\n    activeResourceClass: ResourceClass;\n\n    // properties for the selected ontology or selected resource class\n    properties: Properties;\n\n    result: ReadResourcesSequence = new ReadResourcesSequence([], 0);\n\n    // reference to the component that controls the resource class selection\n    @ViewChild('resourceClass') resourceClassComponent: SelectResourceClassComponent;\n\n    // reference to the component controlling the property selection\n    @ViewChildren('property') propertyComponents: QueryList<SelectPropertyComponent>;\n\n    // FormGroup (used as parent for child components)\n    form: FormGroup;\n\n    // form validation status\n    formValid = false;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _cacheService: OntologyCacheService,\n        private _gravSearchService: GravsearchGenerationService) {\n    }\n\n    ngOnInit() {\n\n        // parent form is empty, it gets passed to the child components\n        this.form = this.fb.group({});\n\n        // if form status changes, re-run validation\n        this.form.statusChanges.subscribe((data) => {\n            this.formValid = this.validateForm();\n            // console.log(this.form);\n        });\n\n        // initialize ontologies to be used for the ontologies selection in the search form\n        this.initializeOntologies();\n    }\n\n    /**\n     * Add a property to the search form.\n     */\n    addProperty() {\n        this.activeProperties.push(true);\n    }\n\n    /**\n     * Remove the last property from the search form.\n     */\n    removeProperty() {\n        this.activeProperties.splice(-1, 1);\n    }\n\n    /**\n     * Gets all available ontologies for the search form.\n     */\n    initializeOntologies() {\n        this._cacheService.getOntologiesMetadata().subscribe(\n            (ontologies: Array<OntologyMetadata>) => {\n                this.ontologies = ontologies;\n            });\n    }\n\n    /**\n     * Once an ontology has been selected, gets its classes and properties.\n     * The classes and properties will be made available to the user for selection.\n     *\n     * @param ontologyIri Iri of the ontology chosen by the user.\n     */\n    getResourceClassesAndPropertiesForOntology(ontologyIri: string): void {\n\n        // reset active resource class definition\n        this.activeResourceClass = undefined;\n\n        // reset specified properties\n        this.activeProperties = [];\n\n        this.activeOntology = ontologyIri;\n\n        this._cacheService.getEntityDefinitionsForOntologies([ontologyIri]).subscribe(\n            (ontoInfo: OntologyInformation) => {\n\n                this.resourceClasses = ontoInfo.getResourceClassesAsArray();\n                this.properties = ontoInfo.getProperties();\n\n            }\n        );\n\n    }\n\n    /**\n     * Once a resource class has been selected, gets its properties.\n     * The properties will be made available to the user for selection.\n     *\n     * @param resourceClassIri\n     */\n    getPropertiesForResourceClass(resourceClassIri: string) {\n\n        // reset specified properties\n        this.activeProperties = [];\n\n        // if the client undoes the selection of a resource class, use the active ontology as a fallback\n        if (resourceClassIri === null) {\n            this.getResourceClassesAndPropertiesForOntology(this.activeOntology);\n        } else {\n\n            this._cacheService.getResourceClassDefinitions([resourceClassIri]).subscribe(\n                (ontoInfo: OntologyInformation) => {\n                    this.properties = ontoInfo.getProperties();\n\n                    this.activeResourceClass = ontoInfo.getResourceClasses()[resourceClassIri];\n\n                }\n            );\n\n        }\n\n    }\n\n    /**\n     * Validates form and returns its status (boolean).\n     */\n    private validateForm() {\n\n        // check that either a resource class is selected or at least one property is specified\n        return this.form.valid &&\n            (this.propertyComponents.length > 0 || (this.resourceClassComponent !== undefined && this.resourceClassComponent.getResourceClassSelected() !== false));\n\n    }\n\n    /**\n     * Resets the form (selected resource class and specified properties) preserving the active ontology.\n     */\n    resetForm() {\n        if (this.activeOntology !== undefined) {\n            this.getResourceClassesAndPropertiesForOntology(this.activeOntology);\n        }\n    }\n\n\n    /**\n     * Creates a GravSearch query with the given form values and calls the extended search route.\n     */\n    submit() {\n\n        if (!this.formValid) return; // check that from is valid\n\n        const resClassOption = this.resourceClassComponent.getResourceClassSelected();\n\n        let resClass;\n\n        if (resClassOption !== false) {\n            resClass = resClassOption;\n        }\n\n        const properties: PropertyWithValue[] = this.propertyComponents.map(\n            (propComp) => {\n                return propComp.getPropertySelectedWithValue();\n            }\n        );\n\n        const gravsearch = this._gravSearchService.createGravsearchQuery(properties, resClass, 0);\n\n        this._router.navigate([this.route + '/extended/', gravsearch], { relativeTo: this._route });\n\n        // toggle extended search form\n        this.toggleExtendedSearchForm.emit(true);\n\n    }\n\n}\n","import { Component, EventEmitter, Inject, Input, OnInit, Output } from '@angular/core';\nimport { OntologyMetadata } from '@knora/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'kui-select-ontology',\n  template: `<mat-form-field *ngIf=\"ontologies.length > 0\">\n  <mat-select placeholder=\"Ontology\" [formControl]=\"form.controls['ontology']\">\n      <mat-option *ngFor=\"let onto of ontologies\" [value]=\"onto.id\">{{ onto.label }}</mat-option>\n  </mat-select>\n</mat-form-field>\n`,\n  styles: [``]\n})\nexport class SelectOntologyComponent implements OnInit {\n\n  @Input() formGroup: FormGroup;\n\n  @Input() ontologies: Array<OntologyMetadata>;\n\n  @Output() ontologySelected = new EventEmitter<string>();\n\n  form: FormGroup;\n\n  constructor(@Inject(FormBuilder) private fb: FormBuilder) { }\n\n  ngOnInit() {\n\n    // build a form for the named graph selection\n    this.form = this.fb.group({\n      ontology: [null, Validators.required]\n    });\n\n    // emit Iri of the ontology when being selected\n    this.form.valueChanges.subscribe((data) => {\n      this.ontologySelected.emit(data.ontology);\n    });\n\n    // add form to the parent form group\n    this.formGroup.addControl('ontology', this.form);\n\n  }\n\n}\n","import { Component, Inject, Input, OnChanges, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n    ComparisonOperator,\n    ComparisonOperatorAndValue,\n    Equals,\n    Exists,\n    GreaterThan,\n    GreaterThanEquals,\n    KnoraConstants,\n    LessThan,\n    LessThanEquals,\n    Like,\n    Match,\n    NotEquals,\n    Property,\n    PropertyValue,\n    Value\n} from '@knora/core';\n\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'kui-specify-property-value',\n    template: `<mat-form-field class=\"search-operator-field\" *ngIf=\"comparisonOperators?.length > 0\">\n    <mat-select placeholder=\"Comparison Operator\" [formControl]=\"form.controls['comparisonOperator']\">\n        <mat-option *ngFor=\"let compOp of comparisonOperators\" [value]=\"compOp\">{{ compOp.label }}</mat-option>\n    </mat-select>\n</mat-form-field>\n\n<!-- select apt component for value specification using a switch case statement-->\n<span\n    *ngIf=\"comparisonOperatorSelected !== undefined && comparisonOperatorSelected !== null && comparisonOperatorSelected.getClassName() != 'Exists'\"\n    [ngSwitch]=\"propertyValueType\">\n  <boolean-value #propertyValue [formGroup]=\"form\" *ngSwitchCase=\"KnoraConstants.BooleanValue\"></boolean-value>\n  <date-value #propertyValue [formGroup]=\"form\" *ngSwitchCase=\"KnoraConstants.DateValue\"></date-value>\n  <decimal-value #propertyValue [formGroup]=\"form\" *ngSwitchCase=\"KnoraConstants.DecimalValue\"></decimal-value>\n  <integer-value #propertyValue [formGroup]=\"form\" *ngSwitchCase=\"KnoraConstants.IntValue\"></integer-value>\n  <link-value #propertyValue [formGroup]=\"form\" [restrictResourceClass]=\"property.objectType\"\n              *ngSwitchCase=\"KnoraConstants.Resource\"></link-value>\n  <text-value #propertyValue [formGroup]=\"form\" *ngSwitchCase=\"KnoraConstants.TextValue\"></text-value>\n  <uri-value #propertyValue [formGroup]=\"form\" *ngSwitchCase=\"KnoraConstants.UriValue\"></uri-value>\n\n    <!-- TODO: Resource: handle linking properties with target class restriction: access property member to get objectClass via property() getter method -->\n  <span *ngSwitchDefault=\"\">Not supported {{propertyValueType}}</span>\n</span>\n`,\n    styles: [`.search-operator-field{margin-right:8px}`]\n})\nexport class SpecifyPropertyValueComponent implements OnInit, OnChanges {\n\n    KnoraConstants = KnoraConstants;\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    @ViewChild('propertyValue') propertyValueComponent: PropertyValue;\n\n    // setter method for the property chosen by the user\n    @Input()\n    set property(prop: Property) {\n        this.comparisonOperatorSelected = undefined; // reset to initial state\n        this._property = prop;\n        this.resetComparisonOperators(); // reset comparison operators for given property (overwriting any previous selection)\n    }\n\n    // getter method for this._property\n    get property(): Property {\n        return this._property;\n    }\n\n    private _property: Property;\n\n    form: FormGroup;\n\n    // available comparison operators for the property\n    comparisonOperators: Array<ComparisonOperator> = [];\n\n    // comparison operator selected by the user\n    comparisonOperatorSelected: ComparisonOperator;\n\n    // the type of the property\n    propertyValueType;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    /**\n     * Resets the comparison operators for this._property.\n     */\n    resetComparisonOperators() {\n\n        // depending on object class, set comparison operators and value entry field\n        if (this._property.isLinkProperty) {\n            this.propertyValueType = KnoraConstants.Resource;\n        } else {\n            this.propertyValueType = this._property.objectType;\n        }\n\n        switch (this.propertyValueType) {\n\n            case KnoraConstants.TextValue:\n                this.comparisonOperators = [new Like(), new Match(), new Equals(), new NotEquals(), new Exists()];\n                break;\n\n            case KnoraConstants.BooleanValue:\n            case KnoraConstants.Resource:\n            case KnoraConstants.UriValue:\n            case KnoraConstants.IntervalValue:\n                this.comparisonOperators = [new Equals(), new NotEquals(), new Exists()];\n                break;\n\n            case KnoraConstants.IntValue:\n            case KnoraConstants.DecimalValue:\n            case KnoraConstants.DateValue:\n                this.comparisonOperators = [new Equals(), new NotEquals(), new LessThan(), new LessThanEquals(), new GreaterThan(), new GreaterThanEquals(), new Exists()];\n                break;\n\n            case KnoraConstants.ListValue:\n            case KnoraConstants.GeomValue:\n            case KnoraConstants.FileValue:\n            case KnoraConstants.AudioFileValue:\n            case KnoraConstants.StillImageFileValue:\n            case KnoraConstants.DDDFileValue:\n            case KnoraConstants.MovingImageFileValue:\n            case KnoraConstants.TextFileValue:\n            case KnoraConstants.ColorValue:\n                this.comparisonOperators = [new Exists()];\n                break;\n\n            default:\n                console.log('ERROR: Unsupported value type ' + this._property.objectType);\n\n        }\n\n    }\n\n    ngOnInit() { }\n\n    ngOnChanges() {\n\n        // build a form for comparison operator selection\n        this.form = this.fb.group({\n            comparisonOperator: [null, Validators.required]\n        });\n\n        // store comparison operator when selected\n        this.form.valueChanges.subscribe((data) => {\n            this.comparisonOperatorSelected = data.comparisonOperator;\n        });\n\n        resolvedPromise.then(() => {\n\n            // remove from the parent form group (clean reset)\n            this.formGroup.removeControl('comparisonOperator');\n\n            // add form to the parent form group\n            this.formGroup.addControl('comparisonOperator', this.form);\n        });\n\n    }\n\n    /**\n     * Gets the specified comparison operator and value for the property.\n     *\n     * returns {ComparisonOperatorAndValue} the comparison operator and the specified value\n     */\n    getComparisonOperatorAndValueLiteralForProperty(): ComparisonOperatorAndValue {\n        // return value (literal or IRI) from the child component\n        let value: Value;\n\n        // comparison operator 'Exists' does not require a value\n        if (this.comparisonOperatorSelected.getClassName() !== 'Exists') {\n            value = this.propertyValueComponent.getValue();\n        }\n\n        // return the comparison operator and the specified value\n        return new ComparisonOperatorAndValue(this.comparisonOperatorSelected, value);\n\n    }\n\n}\n\n","import { Component, Inject, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport {\n    Cardinality,\n    CardinalityOccurrence,\n    ComparisonOperatorAndValue,\n    Properties,\n    Property,\n    PropertyWithValue,\n    ResourceClass\n} from '@knora/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { SpecifyPropertyValueComponent } from './specify-property-value/specify-property-value.component';\n\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'kui-select-property',\n    template: `<mat-form-field class=\"search-property-field\" *ngIf=\"propertiesAsArray?.length > 0\">\n  <mat-select placeholder=\"Properties\" [formControl]=\"form.controls['property']\">\n    <mat-option *ngFor=\"let prop of propertiesAsArray\" [value]=\"prop.id\">{{ prop.label }}</mat-option>\n  </mat-select>\n</mat-form-field>\n\n<kui-specify-property-value #specifyPropertyValue [formGroup]=\"form\" *ngIf=\"propertySelected !== undefined\" [property]=\"propertySelected\"></kui-specify-property-value>\n\n<mat-checkbox matTooltip=\"Sort criterion\" *ngIf=\"propertySelected !== undefined && sortCriterion()\" [formControl]=\"form.controls['isSortCriterion']\"></mat-checkbox>`,\n    styles: [`.search-property-field{margin-right:8px}`]\n})\nexport class SelectPropertyComponent implements OnInit, OnDestroy {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    // index of the given property (unique)\n    @Input() index: number;\n\n    // setter method for properties when being updated by parent component\n    @Input()\n    set properties(value: Properties) {\n        this.propertySelected = undefined; // reset selected property (overwriting any previous selection)\n        this._properties = value;\n        this.updatePropertiesArray();\n    }\n\n    get properties() {\n       return this._properties;\n    }\n\n    _activeResourceClass: ResourceClass;\n\n    // setter method for selected resource class\n    @Input()\n    set activeResourceClass(value: ResourceClass) {\n        this._activeResourceClass = value;\n    }\n\n    // reference to child component: combination of comparison operator and value for chosen property\n    @ViewChild('specifyPropertyValue') specifyPropertyValue: SpecifyPropertyValueComponent;\n\n    // properties that can be selected from\n    private _properties: Properties;\n\n    // properties as an Array structure (based on this.properties)\n    propertiesAsArray: Array<Property>;\n\n    // represents the currently selected property\n    propertySelected: Property;\n\n    form: FormGroup;\n\n    // unique name for this property to be used in the parent FormGroup\n    propIndex: string;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        // build a form for the property selection\n        this.form = this.fb.group({\n            property: [null, Validators.required],\n            isSortCriterion: [false, Validators.required]\n        });\n\n        // update the selected property\n        this.form.valueChanges.subscribe((data) => {\n            const propIri = data.property;\n            this.propertySelected = this._properties[propIri];\n        });\n\n        resolvedPromise.then(() => {\n            this.propIndex = 'property' + this.index;\n\n            // add form to the parent form group\n            this.formGroup.addControl(this.propIndex, this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl(this.propIndex);\n        });\n    }\n\n    /**\n     * Indicates if property can be used as a sort criterion.\n     * Property has to have cardinality or max cardinality 1 for the chosen resource class.\n     *\n     * We cannot sort by properties whose cardinality is greater than 1.\n     * Return boolean\n     */\n    sortCriterion() {\n\n        // check if a resource class is selected and if the property's cardinality is 1 for the selected resource class\n        if (this._activeResourceClass !== undefined && this.propertySelected !== undefined && !this.propertySelected.isLinkProperty) {\n\n            const cardinalities: Cardinality[] = this._activeResourceClass.cardinalities.filter(\n                (card: Cardinality) => {\n                    // cardinality 1 or max occurrence 1\n                    return card.property === this.propertySelected.id\n                        && card.value === 1\n                        && (card.occurrence === CardinalityOccurrence.card || card.occurrence === CardinalityOccurrence.maxCard)\n\n                }\n            );\n\n            return cardinalities.length === 1;\n        } else {\n            return false;\n        }\n\n    }\n\n    /**\n     * Updates the properties array that is accessed by the template.\n     */\n    private updatePropertiesArray() {\n\n        // represent the properties as an array to be accessed by the template\n        const propsArray = [];\n\n        for (const propIri in this._properties) {\n            if (this._properties.hasOwnProperty(propIri)) {\n                const prop = this._properties[propIri];\n\n                // only list editable props that are not link value props\n                if (prop.isEditable && !prop.isLinkValueProperty) {\n                    propsArray.push(this._properties[propIri]);\n                }\n            }\n        }\n\n        this.propertiesAsArray = propsArray;\n    }\n\n    /**\n     * Returns the selected property with the specified value.\n     */\n    getPropertySelectedWithValue(): PropertyWithValue {\n\n        const propVal: ComparisonOperatorAndValue = this.specifyPropertyValue.getComparisonOperatorAndValueLiteralForProperty();\n\n        let isSortCriterion = false;\n\n        // only non linking properties can be used for sorting\n        if (!this.propertySelected.isLinkProperty) {\n            isSortCriterion = this.form.value.isSortCriterion;\n        }\n\n        return new PropertyWithValue(this.propertySelected, propVal, isSortCriterion);\n\n    }\n\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n\n@Component({\n    selector: 'boolean-value',\n    template: `<mat-checkbox [formControl]=\"form.controls['booleanValue']\"></mat-checkbox>\n`,\n    styles: [``]\n})\nexport class BooleanValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.BooleanValue;\n\n    form: FormGroup;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            booleanValue: [false, Validators.compose([Validators.required])]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n        return new ValueLiteral(String(this.form.value.booleanValue), KnoraConstants.xsdBoolean);\n    }\n}\n","import { Component, Directive, Host, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\nimport { GregorianCalendarDate, JDNConvertibleCalendar, JDNPeriod } from 'jdnconvertiblecalendar';\nimport { DateAdapter, MAT_DATE_LOCALE, MatCalendar } from '@angular/material';\nimport { JDNConvertibleCalendarDateAdapter } from 'jdnconvertiblecalendardateadapter';\n\n/** Custom header component containing a calendar format switcher */\n@Component({\n    selector: 'kui-calendar-header',\n    template: `\n      <mat-select placeholder=\"Calendar Format\" [formControl]=\"form.controls['calendar']\">\n        <mat-option *ngFor=\"let cal of supportedCalendarFormats\" [value]=\"cal\">{{cal}}</mat-option>\n      </mat-select>\n      <mat-calendar-header></mat-calendar-header>\n    `,\n    styles: []\n})\nexport class HeaderComponent<D> implements OnInit {\n    constructor(@Host() private _calendar: MatCalendar<JDNConvertibleCalendar>,\n        private _dateAdapter: DateAdapter<JDNConvertibleCalendar>,\n        @Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    form: FormGroup;\n\n    // a list of supported calendar formats (Gregorian and Julian)\n    supportedCalendarFormats = JDNConvertibleCalendar.supportedCalendars;\n\n    // the currently active calendar format\n    activeFormat;\n\n    ngOnInit() {\n\n        // get the currently active calendar format from the date adapter\n        if (this._dateAdapter instanceof JDNConvertibleCalendarDateAdapter) {\n            this.activeFormat = this._dateAdapter.activeCalendarFormat;\n        } else {\n            console.log('date adapter is expected to be an instance of JDNConvertibleCalendarDateAdapter');\n        }\n\n        // build a form for the calendar format selection\n        this.form = this.fb.group({\n            calendar: [this.activeFormat, Validators.required]\n        });\n\n        // do the conversion when the user selects another calendar format\n        this.form.valueChanges.subscribe((data) => {\n            // pass the target calendar format to the conversion method\n            this.convertDate(data.calendar);\n        });\n\n    }\n\n    /**\n     * Converts the date into the target format.\n     *\n     * @param calendar the target calendar format.\n     */\n    convertDate(calendar: 'Gregorian' | 'Julian') {\n\n        if (this._dateAdapter instanceof JDNConvertibleCalendarDateAdapter) {\n\n            // convert the date into the target calendar format\n            const convertedDate = this._dateAdapter.convertCalendarFormat(this._calendar.activeDate, calendar);\n\n            // set the new date\n            this._calendar.activeDate = convertedDate;\n\n            // select the new date in the datepicker UI\n            this._calendar._dateSelected(convertedDate);\n\n            // update view after calendar format conversion\n            const view = this._calendar.currentView === 'month' ? this._calendar.monthView :\n                (this._calendar.currentView === 'year' ? this._calendar.yearView : this._calendar.multiYearView);\n\n            view.ngAfterContentInit();\n        } else {\n            console.log('date adapter is expected to be an instance of JDNConvertibleCalendarDateAdapter');\n        }\n    }\n}\n","import { Component, Host, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\nimport { GregorianCalendarDate, JDNConvertibleCalendar, JDNPeriod } from 'jdnconvertiblecalendar';\nimport { HeaderComponent } from './header-calendar/header-calendar.component';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'date-value',\n    template: `<mat-form-field>\n    <jdn-datepicker>\n        <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\" [formControl]=\"form.controls['dateValue']\">\n        <mat-datepicker #picker [calendarHeaderComponent]=\"headerComponent\"></mat-datepicker>\n    </jdn-datepicker>\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n</mat-form-field>`,\n    styles: [``]\n})\nexport class DateValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.DateValue;\n\n    form: FormGroup;\n\n    // custom header for the datepicker\n    headerComponent = HeaderComponent;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    ngOnInit() {\n\n        // init datepicker\n        this.form = this.fb.group({\n            dateValue: [null, Validators.compose([Validators.required])]\n        });\n\n        this.form.valueChanges.subscribe((data) => {\n            // console.log(data.dateValue);\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        const dateObj: JDNConvertibleCalendar = this.form.value.dateValue;\n\n        // get calendar format\n        const calendarFormat = dateObj.calendarName;\n        // get calendar period\n        const calendarPeriod = dateObj.toCalendarPeriod();\n        // get the date\n        const dateString = `${calendarFormat.toUpperCase()}:${calendarPeriod.periodStart.year}-${calendarPeriod.periodStart.month}-${calendarPeriod.periodStart.day}:${calendarPeriod.periodEnd.year}-${calendarPeriod.periodEnd.month}-${calendarPeriod.periodEnd.day}`;\n\n        return new ValueLiteral(String(dateString), KnoraConstants.DateValue);\n    }\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'decimal-value',\n    template: `<mat-form-field>\n    <input matInput [formControl]=\"form.controls['decimalValue']\" placeholder=\"Decimal value\" value=\"\" type=\"number\">\n</mat-form-field>\n`,\n    styles: [``]\n})\nexport class DecimalValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.DecimalValue;\n\n    form: FormGroup;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            decimalValue: [null, Validators.compose([Validators.required])]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new ValueLiteral(String(this.form.value.decimalValue), KnoraConstants.xsdDecimal);\n    }\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'integer-value',\n    template: `<mat-form-field>\n    <input matInput [formControl]=\"form.controls['integerValue']\" placeholder=\"Integer value\" value=\"\" type=\"number\">\n</mat-form-field>\n`,\n    styles: [``]\n})\nexport class IntegerValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.IntValue;\n\n    form: FormGroup;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            integerValue: [null, Validators.compose([Validators.required, Validators.pattern(/^-?\\d+$/)])] // only allow for integer values (no fractions)\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new ValueLiteral(String(this.form.value.integerValue), KnoraConstants.xsdInteger);\n    }\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    ApiServiceResult,\n    ConvertJSONLD,\n    IRI,\n    KnoraConstants,\n    OntologyCacheService,\n    PropertyValue,\n    ReadResource,\n    ReadResourcesSequence,\n    SearchService,\n    Value\n} from '@knora/core';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'link-value',\n    template: `<mat-form-field>\n    <input matInput placeholder=\"resource\" aria-label=\"resource\" [matAutocomplete]=\"auto\" [formControl]=\"form.controls['resource']\">\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayResource\">\n        <mat-option *ngFor=\"let res of resources\" [value]=\"res\">\n            {{res?.label}}\n        </mat-option>\n    </mat-autocomplete>\n</mat-form-field>\n`,\n    styles: [``]\n})\nexport class LinkValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.LinkValue;\n\n    form: FormGroup;\n\n    resources: ReadResource[];\n\n    private _restrictToResourceClass: string;\n\n    @Input()\n    set restrictResourceClass(value: string) {\n        this._restrictToResourceClass = value;\n    }\n\n    get restrictResourceClass() {\n        return this._restrictToResourceClass;\n    }\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder, private _searchService: SearchService, private _cacheService: OntologyCacheService) {\n\n    }\n\n    /**\n     * Displays a selected resource using its label.\n     *\n     * @param resource the resource to be displayed (or no selection yet).\n     * @returns\n     */\n    displayResource(resource: ReadResource | null) {\n\n        // null is the initial value (no selection yet)\n        if (resource !== null) {\n            return resource.label;\n        }\n    }\n\n    /**\n     * Search for resources whose labels contain the given search term, restricting to to the given properties object constraint.\n     *\n     * @param searchTerm\n     */\n    searchByLabel(searchTerm: string) {\n\n        // at least 3 characters are required\n        if (searchTerm.length >= 3) {\n\n            this._searchService.searchByLabel(searchTerm, this._restrictToResourceClass).subscribe(\n                (result: ApiServiceResult) => {\n                    const promises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const promise = promises.compact(result.body, {});\n\n                    promise.then((compacted) => {\n\n                        const resourceSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(compacted);\n\n                        this.resources = resourceSeq.resources;\n\n                    }, function (err) {\n\n                        console.log('JSONLD of full resource request could not be expanded:' + err);\n                    });\n\n                }\n            );\n        } else {\n            // clear selection\n            this.resources = undefined;\n        }\n\n    }\n\n    /**\n     * Checks that the selection is a [[ReadResource]].\n     *\n     * Surprisingly, [null] has to be returned if the value is valid: https://angular.io/guide/form-validation#custom-validators\n     *\n     * @param the form element whose value has to be checked.\n     * @returns\n     */\n    validateResource(c: FormControl) {\n\n        const isValidResource = (c.value instanceof ReadResource);\n\n        if (isValidResource) {\n            return null;\n        } else {\n            return {\n                noResource: {\n                    value: c.value\n                }\n            };\n        }\n\n    }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            resource: [null, Validators.compose([\n                Validators.required,\n                this.validateResource\n            ])]\n        });\n\n        this.form.valueChanges.subscribe((data) => {\n            this.searchByLabel(data.resource);\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new IRI(this.form.value.resource.id);\n    }\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'text-value',\n    template: `<mat-form-field>\n    <input matInput [formControl]=\"form.controls['textValue']\" placeholder=\"text value\" value=\"\">\n</mat-form-field>\n`,\n    styles: [``]\n})\nexport class TextValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.TextValue;\n\n    form: FormGroup;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            textValue: [null, Validators.required]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new ValueLiteral(String(this.form.value.textValue), KnoraConstants.xsdString);\n    }\n\n}\n","import { Component, Inject, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { KnoraConstants, PropertyValue, Utils, Value, ValueLiteral } from '@knora/core';\n\n// https://stackoverflow.com/questions/45661010/dynamic-nested-reactive-form-expressionchangedafterithasbeencheckederror\nconst resolvedPromise = Promise.resolve(null);\n\n@Component({\n    selector: 'uri-value',\n    template: `<mat-form-field>\n    <input matInput [formControl]=\"form.controls['uriValue']\" placeholder=\"URI\" value=\"\">\n</mat-form-field>\n`,\n    styles: [``]\n})\nexport class UriValueComponent implements OnInit, OnDestroy, PropertyValue {\n\n    // parent FormGroup\n    @Input() formGroup: FormGroup;\n\n    type = KnoraConstants.UriValue;\n\n    form: FormGroup;\n\n    constructor(@Inject(FormBuilder) private fb: FormBuilder) {\n\n    }\n\n    ngOnInit() {\n\n        this.form = this.fb.group({\n            uriValue: [null, Validators.compose([Validators.required, Validators.pattern(Utils.RegexUrl)])]\n        });\n\n        resolvedPromise.then(() => {\n            // add form to the parent form group\n            this.formGroup.addControl('propValue', this.form);\n        });\n\n    }\n\n    ngOnDestroy() {\n\n        // remove form from the parent form group\n        resolvedPromise.then(() => {\n            this.formGroup.removeControl('propValue');\n        });\n\n    }\n\n    getValue(): Value {\n\n        return new ValueLiteral(String(this.form.value.uriValue), KnoraConstants.xsdUri);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatIconModule, MatInputModule,\n    MatListModule,\n    MatSelectModule,\n    MatTooltipModule\n} from '@angular/material';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { KuiCoreModule } from '@knora/core';\nimport { KuiActionModule } from '@knora/action';\nimport { KuiViewerModule } from '@knora/viewer';\n\nimport { MatJDNConvertibleCalendarDateAdapterModule } from 'jdnconvertiblecalendardateadapter';\n\nimport { SearchComponent } from './search.component';\nimport { ExtendedSearchComponent } from './extended-search/extended-search.component';\n\nimport { SelectOntologyComponent } from './extended-search/select-ontology/select-ontology.component';\nimport { SelectResourceClassComponent } from './extended-search/select-resource-class/select-resource-class.component';\nimport { SelectPropertyComponent } from './extended-search/select-property/select-property.component';\nimport { SpecifyPropertyValueComponent } from './extended-search/select-property/specify-property-value/specify-property-value.component';\nimport { BooleanValueComponent } from './extended-search/select-property/specify-property-value/boolean-value/boolean-value.component';\nimport { DateValueComponent } from './extended-search/select-property/specify-property-value/date-value/date-value.component';\nimport { DecimalValueComponent } from './extended-search/select-property/specify-property-value/decimal-value/decimal-value.component';\nimport { IntegerValueComponent } from './extended-search/select-property/specify-property-value/integer-value/integer-value.component';\nimport { LinkValueComponent } from './extended-search/select-property/specify-property-value/link-value/link-value.component';\nimport { TextValueComponent } from './extended-search/select-property/specify-property-value/text-value/text-value.component';\nimport { UriValueComponent } from './extended-search/select-property/specify-property-value/uri-value/uri-value.component';\nimport { HeaderComponent } from './extended-search/select-property/specify-property-value/date-value/header-calendar/header-calendar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BrowserAnimationsModule,\n        MatAutocompleteModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatIconModule,\n        MatListModule,\n        MatSelectModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        KuiCoreModule,\n        KuiActionModule,\n        KuiViewerModule,\n        MatJDNConvertibleCalendarDateAdapterModule\n    ],\n    declarations: [\n        SearchComponent,\n        SelectOntologyComponent,\n        ExtendedSearchComponent,\n        SelectResourceClassComponent,\n        SelectPropertyComponent,\n        SpecifyPropertyValueComponent,\n        BooleanValueComponent,\n        DateValueComponent,\n        DecimalValueComponent,\n        IntegerValueComponent,\n        LinkValueComponent,\n        TextValueComponent,\n        UriValueComponent,\n        HeaderComponent\n    ],\n    exports: [SearchComponent],\n    entryComponents: [\n        HeaderComponent\n    ]\n})\nexport class KuiSearchModule {\n}\n"],"names":["tslib_1.__values","resolvedPromise"],"mappings":";;;;;;;;;;;;;;;;;;;IAgII,yBAAoB,MAAsB,EAC9B,SACA;QAFQ,WAAM,GAAN,MAAM,CAAgB;QAC9B,YAAO,GAAP,OAAO;QACP,YAAO,GAAP,OAAO;qBAjBM,SAAS;gCAIN,KAAK;0BAEV,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;6BAE7C,UAAU;+BACR,UAAU;2BAEd,QAAQ;gCAEF,IAAI;KAM/B;;;;IAED,kCAAQ;;;IAAR;KACC;;;;;;;;;;;;IAOD,+BAAK;;;;;;IAAL,UAAM,UAAuB,EAAE,KAAK;QAChC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;QACjE,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,OAAO,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC,EAAE;YAC3F,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SAC7B;QACD,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,KAAK,CAAC,KAAK,KAAK,EAAE,EAAE;YACtE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;SAChC;KACJ;;;;;;;;;;IAMD,kCAAQ;;;;;IAAR,UAAS,UAAuB;QAC5B,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;YAC7D,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;YAMtE,IAAI,kBAAkB,GAAa,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YAClF,IAAI,kBAAkB,KAAK,IAAI,EAAE;gBAAE,kBAAkB,GAAG,EAAE,CAAC;aAAE;;YAC7D,IAAI,CAAC,GAAW,CAAC,CAAC;;gBAClB,KAAoB,IAAA,uBAAAA,SAAA,kBAAkB,CAAA,sDAAA;oBAAjC,IAAM,KAAK,+BAAA;;oBAEZ,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,EAAE;wBAAE,kBAAkB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAAE;oBACpE,CAAC,EAAE,CAAC;iBACP;;;;;;;;;YAED,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1C,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC;;SAG1E;aAAM;YACH,UAAU,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;SACpE;;KACJ;;;;;;;;;;IAMD,qCAAW;;;;;IAAX,UAAY,UAAuB;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,UAAU,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;QAChC,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;KAClD;;;;;;;;;;IAMD,sCAAY;;;;;IAAZ,UAAa,KAAa;QACtB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,GAAG,KAAK,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;KACnC;;;;;;;;;;IAMD,yCAAe;;;;;IAAf,UAAgB,IAAmB;QAAnB,qBAAA,EAAA,WAAmB;QAC/B,IAAI,IAAI,EAAE;;YAEN,IAAM,CAAC,GAAW,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;SACvE;aAAM;;YAEH,YAAY,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;SACzC;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;KAEpE;;;;;;;;IAKD,kCAAQ;;;;IAAR;QACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;KAClD;;;;;;;;;;IAMD,oCAAU;;;;;IAAV,UAAW,IAAY;QACnB,QAAQ,IAAI;YACR,KAAK,cAAc;gBACf,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,KAAK,QAAQ,GAAG,UAAU,GAAG,QAAQ,CAAC,CAAC;gBAC/E,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC7B,MAAM;YACV,KAAK,gBAAgB;gBACjB,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,KAAK,QAAQ,GAAG,UAAU,GAAG,QAAQ,CAAC,CAAC;gBACnF,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;gBAC9B,MAAM;SACb;KACJ;;gBAjOJ,SAAS,SAAC;oBACP,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,+iGA8Db;oBACG,MAAM,EAAE,CAAC,o7EAAo7E,CAAC;oBAC97E,UAAU,EAAE;wBACR,OAAO,CAAC,kBAAkB,EACtB;4BACI,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;4BAC7C,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;4BAC5C,UAAU,CAAC,kBAAkB,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;4BACxD,UAAU,CAAC,kBAAkB,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;yBAC5D,CACJ;wBACD,OAAO,CAAC,oBAAoB,EACxB;4BACI,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;4BAC7C,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;4BAC5C,UAAU,CAAC,kBAAkB,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;4BACxD,UAAU,CAAC,kBAAkB,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;yBAC5D,CACJ;qBACJ;iBACJ;;;;gBA7FQ,cAAc;gBAAE,MAAM;gBADX,UAAU;;;wBAmGzB,KAAK;;0BAjHV;;;;;;;ACAA;AAKA,IAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAwC1C,sCAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;;0CAVjB,IAAI,YAAY,EAAU;KAWhE;IAvBD,sBACI,yDAAe;;;;;QAMnB;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;SAChC;;;;;;QATD,UACoB,KAA2B;YAC3C,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;YACvC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SACjC;;;OAAA;;;;;;;;;;;IA0BD,+DAAwB;;;;;IAAxB;QACI,IAAI,IAAI,CAAC,qBAAqB,KAAK,SAAS,IAAI,IAAI,CAAC,qBAAqB,KAAK,IAAI,EAAE;YACjF,OAAO,IAAI,CAAC,qBAAqB,CAAC;SACrC;aAAM;YACH,OAAO,KAAK,CAAC;SAChB;KACJ;;;;;;IAMO,+CAAQ;;;;;;;;QAEZ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,aAAa,EAAE,CAAC,IAAI,CAAC;SACxB,CAAC,CAAC;;QAGH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAI;YAClC,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,aAAa,CAAC;YAChD,KAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,KAAI,CAAC,qBAAqB,CAAC,CAAC;SACpE,CAAC,CAAC;;;;;IAGP,+CAAQ;;;IAAR;QAEI,IAAI,CAAC,QAAQ,EAAE,CAAC;;QAGhB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAEzD;;;;IAED,kDAAW;;;IAAX;QAAA,iBAmBC;QAjBG,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;;;YAIzB,eAAe,CAAC,IAAI,CAAC;;;gBAGjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;gBAE9C,KAAI,CAAC,QAAQ,EAAE,CAAC;;;gBAGhB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;aAEzD,CAAC,CAAC;SAEN;KACJ;;gBAnGJ,SAAS,SAAC;oBACP,QAAQ,EAAE,2BAA2B;oBACrC,QAAQ,EAAE,6aAMI;oBACd,MAAM,EAAE,CAAC,EAAE,CAAC;iBACf;;;;gBAhBQ,WAAW,uBA4CH,MAAM,SAAC,WAAW;;;4BAzB9B,KAAK;kCAGL,KAAK;6CAYL,MAAM;;uCAnCX;;;;;;;ACAA;IA6GI,iCAAyC,EAAe,EAC5C,QACA,SACA,eACA;QAJ6B,OAAE,GAAF,EAAE,CAAa;QAC5C,WAAM,GAAN,MAAM;QACN,YAAO,GAAP,OAAO;QACP,kBAAa,GAAb,aAAa;QACb,uBAAkB,GAAlB,kBAAkB;;wCAtCO,IAAI,YAAY,EAAW;;0BAG1B,EAAE;;gCAMV,EAAE;;+BAGQ,EAAE;sBAQV,IAAI,qBAAqB,CAAC,EAAE,EAAE,CAAC,CAAC;;yBAYpD,KAAK;KAOhB;;;;IAED,0CAAQ;;;IAAR;QAAA,iBAaC;;QAVG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;;QAG9B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAC,IAAI;YACnC,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,YAAY,EAAE,CAAC;;SAExC,CAAC,CAAC;;QAGH,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC/B;;;;;;;;IAKD,6CAAW;;;;IAAX;QACI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;;;;;;;;IAKD,gDAAc;;;;IAAd;QACI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACvC;;;;;;;;IAKD,sDAAoB;;;;IAApB;QAAA,iBAKC;QAJG,IAAI,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC,SAAS,CAChD,UAAC,UAAmC;YAChC,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SAChC,CAAC,CAAC;KACV;;;;;;;;;;;;;;IAQD,4EAA0C;;;;;;;IAA1C,UAA2C,WAAmB;QAA9D,iBAmBC;;QAhBG,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;;QAGrC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAE3B,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC;QAElC,IAAI,CAAC,aAAa,CAAC,iCAAiC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CACzE,UAAC,QAA6B;YAE1B,KAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,yBAAyB,EAAE,CAAC;YAC5D,KAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;SAE9C,CACJ,CAAC;KAEL;;;;;;;;;;;;;;IAQD,+DAA6B;;;;;;;IAA7B,UAA8B,gBAAwB;QAAtD,iBAqBC;;QAlBG,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;;QAG3B,IAAI,gBAAgB,KAAK,IAAI,EAAE;YAC3B,IAAI,CAAC,0CAA0C,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACxE;aAAM;YAEH,IAAI,CAAC,aAAa,CAAC,2BAA2B,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CACxE,UAAC,QAA6B;gBAC1B,KAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;gBAE3C,KAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC,kBAAkB,EAAE,CAAC,gBAAgB,CAAC,CAAC;aAE9E,CACJ,CAAC;SAEL;KAEJ;;;;;IAKO,8CAAY;;;;;;QAGhB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK;aACjB,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,KAAK,IAAI,CAAC,sBAAsB,KAAK,SAAS,IAAI,IAAI,CAAC,sBAAsB,CAAC,wBAAwB,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;;;;;;;;;IAOhK,2CAAS;;;;IAAT;QACI,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;YACnC,IAAI,CAAC,0CAA0C,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACxE;KACJ;;;;;;;;IAMD,wCAAM;;;;IAAN;QAEI,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,OAAO;;QAE5B,IAAM,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,wBAAwB,EAAE,CAAC;;QAE9E,IAAI,QAAQ,CAAC;QAEb,IAAI,cAAc,KAAK,KAAK,EAAE;YAC1B,QAAQ,GAAG,cAAc,CAAC;SAC7B;;QAED,IAAM,UAAU,GAAwB,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAC/D,UAAC,QAAQ;YACL,OAAO,QAAQ,CAAC,4BAA4B,EAAE,CAAC;SAClD,CACJ,CAAC;;QAEF,IAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;QAE1F,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,YAAY,EAAE,UAAU,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;;QAG5F,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAE5C;;gBAnPJ,SAAS,SAAC;oBACP,QAAQ,EAAE,qBAAqB;oBAC/B,QAAQ,EAAE,mrEAgDb;oBACG,MAAM,EAAE,CAAC,+NAA+N,CAAC;iBAC5O;;;;gBAnEQ,WAAW,uBA2GH,MAAM,SAAC,WAAW;gBA5G1B,cAAc;gBAAE,MAAM;gBAI3B,oBAAoB;gBADpB,2BAA2B;;;wBAoE1B,KAAK;2CAGL,MAAM;yCAuBN,SAAS,SAAC,eAAe;qCAGzB,YAAY,SAAC,UAAU;;kCArG5B;;;;;;;ACAA;IAwBE,iCAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;gCAJ3B,IAAI,YAAY,EAAU;KAIM;;;;IAE7D,0CAAQ;;;IAAR;QAAA,iBAeC;;QAZC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,QAAQ,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;SACtC,CAAC,CAAC;;QAGH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAI;YACpC,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3C,CAAC,CAAC;;QAGH,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAElD;;gBArCF,SAAS,SAAC;oBACT,QAAQ,EAAE,qBAAqB;oBAC/B,QAAQ,EAAE,oRAKX;oBACC,MAAM,EAAE,CAAC,EAAE,CAAC;iBACb;;;;gBAXQ,WAAW,uBAsBL,MAAM,SAAC,WAAW;;;4BAR9B,KAAK;6BAEL,KAAK;mCAEL,MAAM;;kCApBT;;;;;;;ACAA;AAsBA,IAAMC,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAgE1C,uCAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;8BAjCvC,cAAc;;mCAyBkB,EAAE;KASlD;IA1BD,sBACI,mDAAQ;;;;;QAOZ;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;SACzB;;;;;;QAVD,UACa,IAAc;YACvB,IAAI,CAAC,0BAA0B,GAAG,SAAS,CAAC;YAC5C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,wBAAwB,EAAE,CAAC;SACnC;;;OAAA;;;;;;;;IA0BD,gEAAwB;;;;IAAxB;;QAGI,IAAI,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE;YAC/B,IAAI,CAAC,iBAAiB,GAAG,cAAc,CAAC,QAAQ,CAAC;SACpD;aAAM;YACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;SACtD;QAED,QAAQ,IAAI,CAAC,iBAAiB;YAE1B,KAAK,cAAc,CAAC,SAAS;gBACzB,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,KAAK,EAAE,EAAE,IAAI,MAAM,EAAE,EAAE,IAAI,SAAS,EAAE,EAAE,IAAI,MAAM,EAAE,CAAC,CAAC;gBAClG,MAAM;YAEV,KAAK,cAAc,CAAC,YAAY,CAAC;YACjC,KAAK,cAAc,CAAC,QAAQ,CAAC;YAC7B,KAAK,cAAc,CAAC,QAAQ,CAAC;YAC7B,KAAK,cAAc,CAAC,aAAa;gBAC7B,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,MAAM,EAAE,EAAE,IAAI,SAAS,EAAE,EAAE,IAAI,MAAM,EAAE,CAAC,CAAC;gBACzE,MAAM;YAEV,KAAK,cAAc,CAAC,QAAQ,CAAC;YAC7B,KAAK,cAAc,CAAC,YAAY,CAAC;YACjC,KAAK,cAAc,CAAC,SAAS;gBACzB,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,MAAM,EAAE,EAAE,IAAI,SAAS,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,IAAI,cAAc,EAAE,EAAE,IAAI,WAAW,EAAE,EAAE,IAAI,iBAAiB,EAAE,EAAE,IAAI,MAAM,EAAE,CAAC,CAAC;gBAC3J,MAAM;YAEV,KAAK,cAAc,CAAC,SAAS,CAAC;YAC9B,KAAK,cAAc,CAAC,SAAS,CAAC;YAC9B,KAAK,cAAc,CAAC,SAAS,CAAC;YAC9B,KAAK,cAAc,CAAC,cAAc,CAAC;YACnC,KAAK,cAAc,CAAC,mBAAmB,CAAC;YACxC,KAAK,cAAc,CAAC,YAAY,CAAC;YACjC,KAAK,cAAc,CAAC,oBAAoB,CAAC;YACzC,KAAK,cAAc,CAAC,aAAa,CAAC;YAClC,KAAK,cAAc,CAAC,UAAU;gBAC1B,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC;gBAC1C,MAAM;YAEV;gBACI,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;SAEjF;KAEJ;;;;IAED,gDAAQ;;;IAAR,eAAc;;;;IAEd,mDAAW;;;IAAX;QAAA,iBAqBC;;QAlBG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,kBAAkB,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;SAClD,CAAC,CAAC;;QAGH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAI;YAClC,KAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,kBAAkB,CAAC;SAC7D,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;;;YAGjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;;;YAGnD,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,oBAAoB,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SAC9D,CAAC,CAAC;KAEN;;;;;;;;;;;;IAOD,uFAA+C;;;;;;IAA/C;;QAEI,IAAI,KAAK,CAAQ;;QAGjB,IAAI,IAAI,CAAC,0BAA0B,CAAC,YAAY,EAAE,KAAK,QAAQ,EAAE;YAC7D,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,CAAC;SAClD;;QAGD,OAAO,IAAI,0BAA0B,CAAC,IAAI,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;KAEjF;;gBA7JJ,SAAS,SAAC;oBACP,QAAQ,EAAE,4BAA4B;oBACtC,QAAQ,EAAE,0rDAsBb;oBACG,MAAM,EAAE,CAAC,0CAA0C,CAAC;iBACvD;;;;gBAjDQ,WAAW,uBAqFH,MAAM,SAAC,WAAW;;;4BA9B9B,KAAK;yCAEL,SAAS,SAAC,eAAe;2BAGzB,KAAK;;wCA7DV;;;;;;;ACAA;AAeA,IAAMA,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IA4D1C,iCAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;KAEvD;IAtCD,sBACI,+CAAU;;;;QAMd;YACG,OAAO,IAAI,CAAC,WAAW,CAAC;SAC1B;;;;;;QATD,UACe,KAAiB;YAC5B,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;YAClC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAChC;;;OAAA;IASD,sBACI,wDAAmB;;;;;;QADvB,UACwB,KAAoB;YACxC,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;SACrC;;;OAAA;;;;IAuBD,0CAAQ;;;IAAR;QAAA,iBAqBC;;QAlBG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,QAAQ,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;YACrC,eAAe,EAAE,CAAC,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC;SAChD,CAAC,CAAC;;QAGH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAI;;YAClC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SACrD,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,GAAG,UAAU,GAAG,KAAI,CAAC,KAAK,CAAC;;;YAGzC,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAI,CAAC,SAAS,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SACxD,CAAC,CAAC;KAEN;;;;IAED,6CAAW;;;IAAX;QAAA,iBAMC;;QAHGA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;SAChD,CAAC,CAAC;KACN;;;;;;;;;;;;;;;;IASD,+CAAa;;;;;;;;IAAb;QAAA,iBAoBC;;QAjBG,IAAI,IAAI,CAAC,oBAAoB,KAAK,SAAS,IAAI,IAAI,CAAC,gBAAgB,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE;;YAEzH,IAAM,aAAa,GAAkB,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAC/E,UAAC,IAAiB;;gBAEd,OAAO,IAAI,CAAC,QAAQ,KAAK,KAAI,CAAC,gBAAgB,CAAC,EAAE;uBAC1C,IAAI,CAAC,KAAK,KAAK,CAAC;wBACf,IAAI,CAAC,UAAU,KAAK,qBAAqB,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,qBAAqB,CAAC,OAAO,CAAC,CAAA;aAE/G,CACJ,CAAC;YAEF,OAAO,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC;SACrC;aAAM;YACH,OAAO,KAAK,CAAC;SAChB;KAEJ;;;;;IAKO,uDAAqB;;;;;;QAGzB,IAAM,UAAU,GAAG,EAAE,CAAC;QAEtB,KAAK,IAAM,OAAO,IAAI,IAAI,CAAC,WAAW,EAAE;YACpC,IAAI,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;;gBAC1C,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;gBAGvC,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;oBAC9C,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;iBAC9C;aACJ;SACJ;QAED,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;;;;;;;;;IAMxC,8DAA4B;;;;IAA5B;;QAEI,IAAM,OAAO,GAA+B,IAAI,CAAC,oBAAoB,CAAC,+CAA+C,EAAE,CAAC;;QAExH,IAAI,eAAe,GAAG,KAAK,CAAC;;QAG5B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE;YACvC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;SACrD;QAED,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;KAEjF;;gBAhKJ,SAAS,SAAC;oBACP,QAAQ,EAAE,qBAAqB;oBAC/B,QAAQ,EAAE,gqBAQuJ;oBACjK,MAAM,EAAE,CAAC,0CAA0C,CAAC;iBACvD;;;;gBAnBQ,WAAW,uBAiEH,MAAM,SAAC,WAAW;;;4BA1C9B,KAAK;wBAGL,KAAK;6BAGL,KAAK;sCAcL,KAAK;uCAML,SAAS,SAAC,sBAAsB;;kCA3DrC;;;;;;;ACAA;AAKA,IAAMA,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAkB1C,+BAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;oBAJjD,cAAc,CAAC,YAAY;KAMjC;;;;IAED,wCAAQ;;;IAAR;QAAA,iBAWC;QATG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,YAAY,EAAE,CAAC,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;SACnE,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;;;YAEjB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC,CAAC;KAEN;;;;IAED,2CAAW;;;IAAX;QAAA,iBAOC;;QAJGA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SAC7C,CAAC,CAAC;KAEN;;;;IAED,wCAAQ;;;IAAR;QACI,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;KAC5F;;gBA3CJ,SAAS,SAAC;oBACP,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,iFACb;oBACG,MAAM,EAAE,CAAC,EAAE,CAAC;iBACf;;;;gBAZQ,WAAW,uBAsBH,MAAM,SAAC,WAAW;;;4BAN9B,KAAK;;gCAjBV;;;;;;;ACAA;;;;;IAmBI,yBAA4B,SAA8C,EAC9D,cACqB,EAAe;QAFpB,cAAS,GAAT,SAAS,CAAqC;QAC9D,iBAAY,GAAZ,YAAY;QACS,OAAE,GAAF,EAAE,CAAa;;wCAMrB,sBAAsB,CAAC,kBAAkB;KALnE;;;;IAUD,kCAAQ;;;IAAR;QAAA,iBAoBC;;QAjBG,IAAI,IAAI,CAAC,YAAY,YAAY,iCAAiC,EAAE;YAChE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC;SAC9D;aAAM;YACH,OAAO,CAAC,GAAG,CAAC,iFAAiF,CAAC,CAAC;SAClG;;QAGD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,QAAQ,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,QAAQ,CAAC;SACrD,CAAC,CAAC;;QAGH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAI;;;YAElC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnC,CAAC,CAAC;KAEN;;;;;;;;;;;;IAOD,qCAAW;;;;;;IAAX,UAAY,QAAgC;QAExC,IAAI,IAAI,CAAC,YAAY,YAAY,iCAAiC,EAAE;;YAGhE,IAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;;YAGnG,IAAI,CAAC,SAAS,CAAC,UAAU,GAAG,aAAa,CAAC;;YAG1C,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;;YAG5C,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,KAAK,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS;iBACzE,IAAI,CAAC,SAAS,CAAC,WAAW,KAAK,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YAErG,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;aAAM;YACH,OAAO,CAAC,GAAG,CAAC,iFAAiF,CAAC,CAAC;SAClG;KACJ;;gBAxEJ,SAAS,SAAC;oBACP,QAAQ,EAAE,qBAAqB;oBAC/B,QAAQ,EAAE,yRAKT;oBACD,MAAM,EAAE,EAAE;iBACb;;;;gBAbsC,WAAW,uBAejC,IAAI;gBAfZ,WAAW;gBAHX,WAAW,uBAoBX,MAAM,SAAC,WAAW;;0BArB3B;;;;;;;ACAA;AAQA,IAAMA,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAyB1C,4BAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;oBAPjD,cAAc,CAAC,SAAS;;+BAKb,eAAe;KAGhC;;;;IAED,qCAAQ;;;IAAR;QAAA,iBAgBC;;QAbG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,SAAS,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC/D,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAI;;SAErC,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;;;YAEjB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC,CAAC;KAEN;;;;IAED,wCAAW;;;IAAX;QAAA,iBAOC;;QAJGA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SAC7C,CAAC,CAAC;KAEN;;;;IAED,qCAAQ;;;IAAR;;QAEI,IAAM,OAAO,GAA2B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;;QAGlE,IAAM,cAAc,GAAG,OAAO,CAAC,YAAY,CAAC;;QAE5C,IAAM,cAAc,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;;QAElD,IAAM,UAAU,GAAM,cAAc,CAAC,WAAW,EAAE,SAAI,cAAc,CAAC,WAAW,CAAC,IAAI,SAAI,cAAc,CAAC,WAAW,CAAC,KAAK,SAAI,cAAc,CAAC,WAAW,CAAC,GAAG,SAAI,cAAc,CAAC,SAAS,CAAC,IAAI,SAAI,cAAc,CAAC,SAAS,CAAC,KAAK,SAAI,cAAc,CAAC,SAAS,CAAC,GAAK,CAAC;QAEjQ,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;KACzE;;gBAjEJ,SAAS,SAAC;oBACP,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,mYAMI;oBACd,MAAM,EAAE,CAAC,EAAE,CAAC;iBACf;;;;gBAnBQ,WAAW,uBAgCH,MAAM,SAAC,WAAW;;;4BAT9B,KAAK;;6BAxBV;;;;;;;ACAA;AAKA,IAAMA,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAmB1C,+BAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;oBAJjD,cAAc,CAAC,YAAY;KAKjC;;;;IAED,wCAAQ;;;IAAR;QAAA,iBAWC;QATG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,YAAY,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;SAClE,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;;;YAEjB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC,CAAC;KAEN;;;;IAED,2CAAW;;;IAAX;QAAA,iBAOC;;QAJGA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SAC7C,CAAC,CAAC;KAEN;;;;IAED,wCAAQ;;;IAAR;QAEI,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;KAC5F;;gBA7CJ,SAAS,SAAC;oBACP,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,sKAGb;oBACG,MAAM,EAAE,CAAC,EAAE,CAAC;iBACf;;;;gBAbQ,WAAW,uBAuBH,MAAM,SAAC,WAAW;;;4BAN9B,KAAK;;gCAlBV;;;;;;;ACAA;AAKA,IAAMA,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAmB1C,+BAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;oBAJjD,cAAc,CAAC,QAAQ;KAM7B;;;;IAED,wCAAQ;;;IAAR;QAAA,iBAWC;QATG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,YAAY,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SACjG,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;;;YAEjB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC,CAAC;KAEN;;;;IAED,2CAAW;;;IAAX;QAAA,iBAOC;;QAJGA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SAC7C,CAAC,CAAC;KAEN;;;;IAED,wCAAQ;;;IAAR;QAEI,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC;KAC5F;;gBA9CJ,SAAS,SAAC;oBACP,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,sKAGb;oBACG,MAAM,EAAE,CAAC,EAAE,CAAC;iBACf;;;;gBAbQ,WAAW,uBAuBH,MAAM,SAAC,WAAW;;;4BAN9B,KAAK;;gCAlBV;;;;;;;ACAA;AAgBA,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAGjC,IAAMA,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAqC1C,4BAAyC,EAAe,EAAU,cAA6B,EAAU,aAAmC;QAAnG,OAAE,GAAF,EAAE,CAAa;QAAU,mBAAc,GAAd,cAAc,CAAe;QAAU,kBAAa,GAAb,aAAa,CAAsB;oBAjBrI,cAAc,CAAC,SAAS;KAmB9B;IAXD,sBACI,qDAAqB;;;;QAIzB;YACI,OAAO,IAAI,CAAC,wBAAwB,CAAC;SACxC;;;;;QAPD,UAC0B,KAAa;YACnC,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;SACzC;;;OAAA;;;;;;;;;;;;;IAgBD,4CAAe;;;;;;IAAf,UAAgB,QAA6B;;QAGzC,IAAI,QAAQ,KAAK,IAAI,EAAE;YACnB,OAAO,QAAQ,CAAC,KAAK,CAAC;SACzB;KACJ;;;;;;;;;;;;IAOD,0CAAa;;;;;;IAAb,UAAc,UAAkB;QAAhC,iBA6BC;;QA1BG,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;YAExB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC,SAAS,CAClF,UAAC,MAAwB;;gBACrB,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;;gBAEjC,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAElD,OAAO,CAAC,IAAI,CAAC,UAAC,SAAS;;oBAEnB,IAAM,WAAW,GAA0B,aAAa,CAAC,qCAAqC,CAAC,SAAS,CAAC,CAAC;oBAE1G,KAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;iBAE1C,EAAE,UAAU,GAAG;oBAEZ,OAAO,CAAC,GAAG,CAAC,wDAAwD,GAAG,GAAG,CAAC,CAAC;iBAC/E,CAAC,CAAC;aAEN,CACJ,CAAC;SACL;aAAM;;YAEH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;KAEJ;;;;;;;;;;;;;;;;;IAUD,6CAAgB;;;;;;;;IAAhB,UAAiB,CAAc;;QAE3B,IAAM,eAAe,IAAI,CAAC,CAAC,KAAK,YAAY,YAAY,CAAC,CAAC;QAE1D,IAAI,eAAe,EAAE;YACjB,OAAO,IAAI,CAAC;SACf;aAAM;YACH,OAAO;gBACH,UAAU,EAAE;oBACR,KAAK,EAAE,CAAC,CAAC,KAAK;iBACjB;aACJ,CAAC;SACL;KAEJ;;;;IAED,qCAAQ;;;IAAR;QAAA,iBAgBC;QAfG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,QAAQ,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC;oBAChC,UAAU,CAAC,QAAQ;oBACnB,IAAI,CAAC,gBAAgB;iBACxB,CAAC,CAAC;SACN,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,IAAI;YAClC,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrC,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;;;YAEjB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC,CAAC;KACN;;;;IAED,wCAAW;;;IAAX;QAAA,iBAOC;;QAJGA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SAC7C,CAAC,CAAC;KAEN;;;;IAED,qCAAQ;;;IAAR;QAEI,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;KAC/C;;gBA/IJ,SAAS,SAAC;oBACP,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,2ZAQb;oBACG,MAAM,EAAE,CAAC,EAAE,CAAC;iBACf;;;;gBAhCQ,WAAW,uBAuDH,MAAM,SAAC,WAAW;gBA7C/B,aAAa;gBAJb,oBAAoB;;;4BA8BnB,KAAK;wCAUL,KAAK;;6BA/CV;;;;;;;ACAA;AAMA,IAAMA,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAmB1C,4BAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;oBAJjD,cAAc,CAAC,SAAS;KAM9B;;;;IAED,qCAAQ;;;IAAR;QAAA,iBAWC;QATG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,SAAS,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;SACzC,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;;;YAEjB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC,CAAC;KAEN;;;;IAED,wCAAW;;;IAAX;QAAA,iBAOC;;QAJGA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SAC7C,CAAC,CAAC;KAEN;;;;IAED,qCAAQ;;;IAAR;QAEI,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;KACxF;;gBA9CJ,SAAS,SAAC;oBACP,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,gJAGb;oBACG,MAAM,EAAE,CAAC,EAAE,CAAC;iBACf;;;;gBAbQ,WAAW,uBAuBH,MAAM,SAAC,WAAW;;;4BAN9B,KAAK;;6BAnBV;;;;;;;ACAA;AAMA,IAAMA,iBAAe,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;IAmB1C,2BAAyC,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;oBAJjD,cAAc,CAAC,QAAQ;KAM7B;;;;IAED,oCAAQ;;;IAAR;QAAA,iBAWC;QATG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtB,QAAQ,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SAClG,CAAC,CAAC;QAEHA,iBAAe,CAAC,IAAI,CAAC;;;YAEjB,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC,CAAC;KAEN;;;;IAED,uCAAW;;;IAAX;QAAA,iBAOC;;QAJGA,iBAAe,CAAC,IAAI,CAAC;YACjB,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SAC7C,CAAC,CAAC;KAEN;;;;IAED,oCAAQ;;;IAAR;QAEI,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;KACpF;;gBA9CJ,SAAS,SAAC;oBACP,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,wIAGb;oBACG,MAAM,EAAE,CAAC,EAAE,CAAC;iBACf;;;;gBAbQ,WAAW,uBAuBH,MAAM,SAAC,WAAW;;;4BAN9B,KAAK;;4BAnBV;;;;;;;ACAA;;;;gBAuCC,QAAQ,SAAC;oBACN,OAAO,EAAE;wBACL,YAAY;wBACZ,uBAAuB;wBACvB,qBAAqB;wBACrB,eAAe;wBACf,iBAAiB;wBACjB,mBAAmB;wBACnB,kBAAkB;wBAClB,cAAc;wBACd,aAAa;wBACb,aAAa;wBACb,eAAe;wBACf,gBAAgB;wBAChB,WAAW;wBACX,mBAAmB;wBACnB,aAAa;wBACb,eAAe;wBACf,eAAe;wBACf,0CAA0C;qBAC7C;oBACD,YAAY,EAAE;wBACV,eAAe;wBACf,uBAAuB;wBACvB,uBAAuB;wBACvB,4BAA4B;wBAC5B,uBAAuB;wBACvB,6BAA6B;wBAC7B,qBAAqB;wBACrB,kBAAkB;wBAClB,qBAAqB;wBACrB,qBAAqB;wBACrB,kBAAkB;wBAClB,kBAAkB;wBAClB,iBAAiB;wBACjB,eAAe;qBAClB;oBACD,OAAO,EAAE,CAAC,eAAe,CAAC;oBAC1B,eAAe,EAAE;wBACb,eAAe;qBAClB;iBACJ;;0BAhFD;;;;;;;;;;;;;;;"}
